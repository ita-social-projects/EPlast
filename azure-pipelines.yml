# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
- group: EPlast
  # Container registry service connection established during pipeline creation
- name: dockerRegistryServiceConnection
  value: '5aab2e73-307d-46b2-8421-8ac50de15018'
- name: imageRepository
  value: 'eplastapi'
- name: containerRegistry
  value: 'eplast.azurecr.io'
- name: dockerfilePath
  value: '**/Dockerfile'
- name: tag
  value: '$(Build.BuildId)'
- name: imagePullSecret
  value: 'eplast1348122b-auth'

  # Agent VM image name
- name: vmImageName
  value: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
- name: k8sNamespaceForPR
  value: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)          
    - upload: manifests
      artifact: manifests
- stage: Test
  displayName: Test stage
  dependsOn: []
  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: 'EPlast/EPlast.sln'
    - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
      displayName: 'Prepare analysis on SonarCloud'
      inputs:
        SonarCloud: sonarcloud
        organization: 'ita-social-projects'
        projectKey: 'ita-social-projects-eplast'
        projectName: 'EPlast '
        extraProperties: |
          sonar.inclusions= EPlast/EPlast.BLL/Services/**, EPlast/EPlast.WebApi/Controllers/**
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
          sonar.cs.nunit.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
          sonar.cs.vstest.reportsPaths=$(Build.SourcesDirectory)/**/*.trx        
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: 'EPlast/EPlast.sln'
        arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Add package coverlet.msbuild'
      inputs:
        command: custom
        projects: |
         EPlast/EPlast.XUnitTest/EPlast.XUnitTest.csproj
         EPlast/EPlast.Tests/EPlast.Tests.csproj
        custom: add
        arguments: 'package coverlet.msbuild'
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: |
         EPlast/EPlast.XUnitTest/EPlast.XUnitTest.csproj
         EPlast/EPlast.Tests/EPlast.Tests.csproj
        arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Include="[EPlast.WebApi]*Controllers*%2c[EPlast.BLL]*Services*" /p:Exclude="[EPlast.XUnitTest]*%2c[EPlast.Tests]*" --logger trx'
        publishTestResults: false
    - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
      displayName: 'Run Code Analysis'
    - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
      displayName: 'Publish Quality Gate Result'
- stage: Deploy
  displayName: Deploy stage
  dependsOn:
  - Build
  - Test
  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'EPlast.eplast'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens in **/*
            inputs:
              rootDirectory: $(Pipeline.Workspace)/manifests
              targetFiles: '**/*.yml'
              keepToken: true
              tokenPrefix: ___
              tokenSuffix: ___ 
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
                $(Pipeline.Workspace)/manifests/ingress-prod.yml
                $(Pipeline.Workspace)/manifests/redis-master-deployment.yaml
                $(Pipeline.Workspace)/manifests/redis-master-service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

